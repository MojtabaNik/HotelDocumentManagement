using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading.Tasks;

namespace DBProvider
{
    public static class Utilities
    {
        public static T DeepClone<T>(T _object)
        {
            using (var ms = new MemoryStream())
            {
                var formatter = new BinaryFormatter();
                formatter.Serialize(ms, _object);
                ms.Position = 0;

                return (T)formatter.Deserialize(ms);
            }
        }

<<<<<<< HEAD
        public static void UpdateSendLetterFile<T>(IList<T> original, List<T> updated)
        {
=======
        //public List<dynamic> CopyListForEntity<T>(IList<dynamic> original, List<dynamic> updated)
        //{
            
        //    List<dynamic> deleted = new List<dynamic>();
        //    foreach (var item in original)
        //    {
        //        dynamic Temp = updated.Find(x => x.Id);
        //        if (Temp!=null)
        //        {
>>>>>>> e24c51ec6ae4b65fbb8da4dc7c912e7056087d78

        //        }else
        //        {
        //            deleted.Add(item);
        //        }
        //    }

        //    return deleted;

        //    //List<T> deletList = new List<T>();
        //    //foreach (var item in original)
        //    //{

        //    //    T Temp = updated.Where(x => x.Id == item.Id);
        //    //    if (Temp != null)
        //    //    {
        //    //        DBC.Entry(item).CurrentValues.SetValues(Temp);
        //    //        updated.Remove(Temp);
        //    //    }
        //    //    else
        //    //    {
        //    //        deletList.Add(item);
        //    //    }
        //    //}
        //    //DBC.Set<SendLetterFile>().RemoveRange(deletList);
        //    //foreach (var item in updated)
        //    //{
        //    //    original.Add(item);
        //    //}

        //    //DBC.SaveChanges();


        //}
    }
}
